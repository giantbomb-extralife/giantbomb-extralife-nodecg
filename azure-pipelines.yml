variables:
  # This is where things like GitHub API tokens come from.
  - group: secure_variables

  # Edit these:
  - name: BUNDLE_NAME
    value: 'giantbomb-extralife-nodecg'
  - name: NODECG_VERSION
    value: 'v1.8.1'

  # These do not need to be edited:
  - name: PIPELINE_ARTIFACT_NAME
    value: 'nodecg'
  - name: TEST_SCREENSHOT_DIR
    value: '$(Build.ArtifactStagingDirectory)/test-screenshots'
  - name: RELATIVE_BUNDLE_ROOT
    value: 'nodecg/bundles/$(BUNDLE_NAME)'
  - name: ABSOLUTE_BUNDLE_ROOT
    value: '$(Agent.BuildDirectory)/$(RELATIVE_BUNDLE_ROOT)'

jobs:
  - job: Build
    pool:
      vmImage: 'vs2017-win2016'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '10.x'
        displayName: 'Install Node.js'

      - powershell: New-Item -ItemType Directory -Path $(ABSOLUTE_BUNDLE_ROOT)
        displayName: 'create directory structure'

      - script: npm install -g nodecg-cli
        displayName: 'install global npm deps'

      - script: |
          set -e && set -o pipefail
          git init
          git remote add origin https://github.com/nodecg/nodecg.git
          git fetch origin refs/tags/$(NODECG_VERSION):refs/tags/$(NODECG_VERSION)
          git checkout $(NODECG_VERSION)
          git reset
        displayName: 'clone NodeCG'
        workingDirectory: $(Agent.BuildDirectory)/nodecg

      - checkout: self
        path: nodecg/bundles/$(BUNDLE_NAME)

      - bash: npm ci
        displayName: 'install project npm'
        workingDirectory: $(ABSOLUTE_BUNDLE_ROOT)

      - bash: |
          set -e && set -o pipefail
          npm run build:schemas
          npm run static
          npm run build
        displayName: 'lint & build'
        workingDirectory: $(ABSOLUTE_BUNDLE_ROOT)

      - publish: $(Agent.BuildDirectory)/nodecg
        artifact: $(PIPELINE_ARTIFACT_NAME)

  # ------ #

  - job: create_prebuilds
    strategy:
      matrix:
        linux:
          imageName: 'ubuntu-18.04'
        mac:
          imageName: 'macos-10.14'
        windows:
          imageName: 'vs2017-win2016'
    pool:
      vmImage: $(imageName)
    dependsOn: build
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '10.x'
        displayName: 'Install Node.js'

      - checkout: none

      - download: current
        artifact: $(PIPELINE_ARTIFACT_NAME)
        patterns: |
          **
          !**/node_modules/**

      - bash: |
          set -e && set -o pipefail
          npm ci --production
          cd ../..
          npm ci --production
        displayName: 'install prod deps (and remove dev deps)'
        workingDirectory: $(Pipeline.Workspace)/$(PIPELINE_ARTIFACT_NAME)/bundles/$(BUNDLE_NAME)

      # Used by the next step.
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.7'

      - bash: |
          set -e && set -o pipefail
          pip install --upgrade setuptools wheel grip

          mkdir ~/.grip
          echo "PASSWORD = '$(GITHUB_TOKEN)'" > ~/.grip/settings.py

          mkdir -p $(Build.ArtifactStagingDirectory)/pkg
          grip README.md --export README.html
        workingDirectory: $(Pipeline.Workspace)/$(PIPELINE_ARTIFACT_NAME)/bundles/$(BUNDLE_NAME)
        displayName: 'Render Bundle README to HTML'

      - task: CopyFiles@2
        inputs:
          sourceFolder: $(Pipeline.Workspace)/$(PIPELINE_ARTIFACT_NAME)/bundles/$(BUNDLE_NAME)
          targetFolder: $(Build.ArtifactStagingDirectory)/zip_contents
          contents: |
            README.md
            README.html
            obs-assets/**
        displayName: 'Copy README and obs-assets to top-level dir'

      - task: DeleteFiles@1
        inputs:
          sourceFolder: $(Pipeline.Workspace)/$(PIPELINE_ARTIFACT_NAME)
          contents: |
            **/README.{md,html}
            **/{obs-assets,.git,test}/**
        displayName: 'shrink pkg size by removing redundant or unnecessary files'

      - bash: |
          set -e && set -o pipefail
          if [ "$(Agent.OS)" = "Windows_NT" ]; then
            node_name="node.exe"
          else
            node_name="node"
          fi
          echo "node_name = $node_name"
          echo "which node_name = $(which $node_name)"
          cp "$(which $node_name)" "$(Build.ArtifactStagingDirectory)/zip_contents/$node_name"
        displayName: 'Copy Node executable'

      - bash: |
          set -e && set -o pipefail
          if [ "$(Agent.OS)" = "Windows_NT" ]; then
            printf "node.exe $(PIPELINE_ARTIFACT_NAME)/index.js\n@pause" >> "nodecg.bat"
          else
            printf "./node $(PIPELINE_ARTIFACT_NAME)/index.js\nread -n 1 -s -r -p "Press any key to continue"" >> "nodecg.sh"
          fi
        workingDirectory: $(Build.ArtifactStagingDirectory)/zip_contents
        displayName: 'Create launcher script'

      - bash: |
          set -e && set -o pipefail
          mkdir -p cfg

          # Interesting way of writing a multi-line file in bash:
          # https://stackoverflow.com/a/18226936
          cat <<EOM > cfg/nodecg.json
          {
           "logging": {
             "console": {
               "level": "info"
             },
             "file": {
               "enabled": true,
               "level": "debug"
             },
             "replicants": false
           }
          }
          EOM
        workingDirectory: $(Pipeline.Workspace)/$(PIPELINE_ARTIFACT_NAME)
        displayName: 'Create top-level nodecg config'

      - bash: |
          set -e && set -o pipefail
          echo [InternetShortcut] > "GitHub Repo.URL"
          echo URL=https://github.com/$(Build.Repository.Name) >> "GitHub Repo.URL"
          echo IconFile=https://github.com/favicon.ico >> "GitHub Repo.URL"
          echo IconIndex=0 >> "GitHub Repo.URL"
        workingDirectory: $(Build.ArtifactStagingDirectory)/zip_contents
        displayName: "Create a URL shortcut to the repo's page on GitHub"

      - pwsh: |
          $short_hash = "$(-join '$(Build.SourceVersion)'[0..7])"
          echo "short_hash $short_hash"
          echo "##vso[task.setvariable variable=SHORT_COMMIT_HASH]$short_hash"
        displayName: 'Compute short commit hash (for use in Artifact name)'

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/zip_contents'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(BUNDLE_NAME)-$(SHORT_COMMIT_HASH)-$(Agent.OS).zip'

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(Pipeline.Workspace)/$(PIPELINE_ARTIFACT_NAME)'
          includeRootFolder: true
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(BUNDLE_NAME)-$(SHORT_COMMIT_HASH)-$(Agent.OS).zip'
          replaceExistingArchive: false

      - publish: '$(Build.ArtifactStagingDirectory)/$(BUNDLE_NAME)-$(SHORT_COMMIT_HASH)-$(Agent.OS).zip'
        artifact: $(Agent.OS)
